
networks:
  portfolio_net:
    driver: bridge
    name: portfolio_net

volumes:
  letsencrypt:
  postgres_data:
  pgadmin_data:
  # jupyter_data:
  portainer_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /home/iron/portfolio/portainer_data



services:
  # === Traefik: reverse-proxy + HTTPS (Let's Encrypt) ===
  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: unless-stopped
    networks: [portfolio_net]
    ports:
      - "80:80"
      - "443:443"
     
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false

      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.email=${TRAEFIK_LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=${ACME_FILE}

      - --log.level=INFO
      - --api=false
    env_file: [.env]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true

  # === Flask: https://${DOMAIN} ===
  flaskapp:
    build:
      context: ./portfolio/app
    container_name: flask_app
    restart: unless-stopped
    networks: [portfolio_net]
    env_file: [.env]
    # якщо твій Flask слухає 5000 (типово) — нічого більше не треба
    labels:
      - traefik.enable=true
      - traefik.docker.network=portfolio_net
      - traefik.http.routers.flask-secure.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.flask-secure.entrypoints=websecure
      - traefik.http.routers.flask-secure.tls=true
      - traefik.http.routers.flask-secure.tls.certresolver=le
      - traefik.http.routers.flask-secure.priority=1
      - traefik.http.services.flask-svc.loadbalancer.server.port=5000

  # === Postgres (тільки внутрішня мережа) ===
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    networks: [portfolio_net]
    env_file: [.env]
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # === pgAdmin: https://${DOMAIN}/pgadmin ===
  pgadmin:
    image: dpage/pgadmin4:8.13
    container_name: pgadmin
    restart: unless-stopped
    networks: [portfolio_net]
    env_file: [.env]
    volumes:
      - pgadmin_data:/var/lib/pgadmin

    labels:
        - "traefik.enable=true"
        - "traefik.docker.network=portfolio_net"

        # Маршрут: той самий хост + префікс /pgadmin
        - "traefik.http.routers.pgadmin.rule=Host(`${DOMAIN}`) && PathPrefix(`/pgadmin`)"
        - "traefik.http.routers.pgadmin.entrypoints=websecure"
        - "traefik.http.routers.pgadmin.tls=true"
        - "traefik.http.routers.pgadmin.tls.certresolver=le"
        - "traefik.http.routers.pgadmin.priority=100"

        # Не STRIPPREFIX! Передаємо префікс через заголовки (як у доках pgAdmin/Nginx)
        - "traefik.http.routers.pgadmin.middlewares=pgadmin-prefixhdrs"
        - "traefik.http.middlewares.pgadmin-prefixhdrs.headers.customrequestheaders.X-Script-Name=/pgadmin"
        - "traefik.http.middlewares.pgadmin-prefixhdrs.headers.customrequestheaders.X-Forwarded-Prefix=/pgadmin"
        - "traefik.http.middlewares.pgadmin-prefixhdrs.headers.customrequestheaders.X-Forwarded-Proto=https"
        # (опц.) коректні абсолютні лінки
        - "traefik.http.middlewares.pgadmin-prefixhdrs.headers.customrequestheaders.X-Forwarded-Host=${DOMAIN}"

        # Явно сервіс і порт
        - "traefik.http.routers.pgadmin.service=pgadmin-svc"
        - "traefik.http.services.pgadmin-svc.loadbalancer.server.port=80"
        - "traefik.http.services.pgadmin-svc.loadbalancer.server.scheme=http"
    depends_on: [postgres]

 # Jupyter: https://${DOMAIN}/jupyter
  jupyter:
    build:
      context: ./jupyter          # твій Dockerfile + requirements.txt тут
      dockerfile: Dockerfile
    container_name: jupyter
    restart: unless-stopped
    user: "1000:1000"
    networks: [portfolio_net]
    env_file: [.env]

    # Jupyter під префіксом /jupyter, тільки пароль (токен вимкнено)
    command:
      - start-notebook.py
      - --ServerApp.base_url=/jupyter
      - --ServerApp.root_dir=/home/jovyan/work
      - --ServerApp.token=
      - --ServerApp.ip=0.0.0.0
      - --ServerApp.port=8888
      - --ServerApp.trust_xheaders=True
      - --ServerApp.allow_remote_access=True

    volumes:
      - type: bind
        source: /home/iron/portfolio/jupyter/notebooks
        target: /home/jovyan/work
      - type: bind
        source: /home/iron/.gcp/bq-key.json
        target: /home/jovyan/.gcp/bq-key.json
        read_only: true
      - type: bind
        source: /home/iron/portfolio/jupyter/py_src           # <— твои модули
        target: /home/jovyan/py_src

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=portfolio_net"
      - "traefik.http.routers.jupyter.rule=Host(`${DOMAIN}`) && PathPrefix(`/jupyter`)"
      - "traefik.http.routers.jupyter.entrypoints=websecure"
      - "traefik.http.routers.jupyter.tls=true"
      - "traefik.http.routers.jupyter.tls.certresolver=le"
      - "traefik.http.routers.jupyter.priority=100"
      - "traefik.http.services.jupyter-svc.loadbalancer.server.port=8888"
 


  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000" # Доступ по IP и порту
    environment:
      - "ENCRYPTION_KEY=${PORTAINER_ENCRYPTION_KEY}" # Добавьте переменную окружения для ключа шифрования
    networks:
      - portfolio_net # Для взаимодействия с другими контейнерами


